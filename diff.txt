diff --git a/modules/forms.py b/modules/forms.py
index e3cef8a..6b06d79 100644
--- a/modules/forms.py
+++ b/modules/forms.py
@@ -154,3 +154,30 @@ class sign_in(Form):
         self.username.errors = ['Invalid Username/Password']
         self.password.errors = []
         return False
+
+
+class visitors_form(Form):
+    email = TextField(validators=[
+        validators.required(),
+        validators.email(),
+        validators.unique(table='visitors', columns=[]),
+    ])
+
+    def get_instance(self, visitor):
+        visitor.email = self.email.data
+        return visitor
+
+
+class visitors_filters(Form):
+    email = TextField(validators=[
+        validators.required(),
+    ])
+
+    def apply(self, query):
+        if self.email.data:
+            query = query.filter(
+                models.visitor.email.like('%%%(email)s%%' % {
+                    'email': self.email.data,
+                })
+            )
+        return query
diff --git a/modules/models.py b/modules/models.py
index aaf7bbc..938cab8 100644
--- a/modules/models.py
+++ b/modules/models.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from datetime import datetime
 from flask import g
 from sqlalchemy.orm import backref, relationship
 
@@ -48,7 +49,6 @@ class category(database.base):
             '''
         ).one()[0]
 
-
     def set_position(self, direction):
         if direction == 'up':
             instance = g.mysql.query(
@@ -131,6 +131,17 @@ class tweet(database.base):
     )
 
 
+class visitor(database.base):
+    __tablename__ = 'visitors'
+    __table_args__ = {
+        'autoload': True,
+    }
+
+    def __init__(self, *args, **kwargs):
+        super(visitor, self).__init__(*args, **kwargs)
+        self.timestamp = datetime.now().isoformat()
+
+
 def swap(one, two):
     one.position, two.position = two.position, one.position
     g.mysql.add(one)
diff --git a/modules/twitter.py b/modules/twitter.py
index 3aceaf5..28ace6a 100644
--- a/modules/twitter.py
+++ b/modules/twitter.py
@@ -3,7 +3,7 @@
 from contextlib import closing
 from datetime import datetime, timedelta
 from random import choice, randint
-from re import findall, VERBOSE
+from re import findall
 from urlparse import urlparse
 
 from furl import furl
@@ -202,22 +202,9 @@ def get_tweet(tweet):
         pass
     if not media:
         for url in findall(
-            r'''
-            http[s]?://
-            (
-                ?:[a-zA-Z]
-                |
-                [0-9]
-                |
-                [$-_@.&+]
-                |
-                [!*\(\),]
-                |
-                (?:%[0-9a-fA-F][0-9a-fA-F])
-            )+
-            ''',
-            text,
-            VERBOSE
+            r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\(\),]|'
+            '(?:%[0-9a-fA-F][0-9a-fA-F]))+',
+            text
         ):
             if 'fbcdn' in url and ('hprofile' in url or 'hphotos' in url):
                 media = url
diff --git a/modules/validators.py b/modules/validators.py
index a8af856..ade4cae 100644
--- a/modules/validators.py
+++ b/modules/validators.py
@@ -2,11 +2,23 @@
 
 from flask import g
 from wtforms.compat import string_types
-from wtforms.validators import DataRequired, StopValidation, ValidationError
+from wtforms.validators import (
+    DataRequired,
+    Email,
+    StopValidation,
+    ValidationError
+)
 
 from modules import database
 
 
+class email(Email):
+
+    def __init__(self, *args, **kwargs):
+        self.message = 'Invalid Email'
+        super(email, self).__init__(*args, **kwargs)
+
+
 class required(DataRequired):
     field_flags = ('required', )
 
diff --git a/resources/javascripts/all.js b/resources/javascripts/all.js
index c547f5a..8d750b1 100644
--- a/resources/javascripts/all.js
+++ b/resources/javascripts/all.js
@@ -90,5 +90,34 @@ jQuery(function () {
         else
             jQuery('header nav').removeClass('small');
     });
-
+    export_results(jQuery('#export-results'));
 });
+
+var export_results = function(elements){
+    elements.click(function(){
+        var visitors = {};
+        var url = jQuery(this).attr('data-url');
+        var table = jQuery(this).parent().parent().find('table');
+        jQuery.each(table.find('tr:not(:first)'), function(index_) {
+            visitors[index_] = new Array();
+            jQuery.each(jQuery(this).find('td:not(:first)'), function(index) {
+                visitors[index_].push(jQuery(this).text().trim());
+            });
+        });
+        visitors = JSON.stringify(visitors);
+        var form = [
+            '<form action="'+url+'" id="export" method="post" style="display:none;">',
+            '<input name="csrf_token" type="hidden"/>',
+            '<input name="visitors" type="hidden"/>',
+            '</form>'
+        ];
+        form = form.join('');
+        jQuery('body').append(form);
+        form = jQuery('#export');
+        form.find('[name="csrf_token"]').val(jQuery(this).parent().parent().find('[name="csrf_token"]').val());
+        form.find('[name="visitors"]').val(visitors);
+        form.submit();
+        form.remove();
+        return false;
+    });
+};
diff --git a/sections/administrators.py b/sections/administrators.py
index 985dade..a212d9f 100644
--- a/sections/administrators.py
+++ b/sections/administrators.py
@@ -1,5 +1,6 @@
 # -*- coding: utf-8 -*-
 
+from csv import QUOTE_ALL, writer
 from flask import (
     abort,
     Blueprint,
@@ -7,10 +8,13 @@ from flask import (
     g,
     redirect,
     render_template,
+    Response,
     request,
     session,
     url_for,
 )
+from cStringIO import StringIO
+from simplejson import loads
 
 from modules import classes
 from modules import decorators
@@ -287,3 +291,75 @@ def sign_out():
         del session['administrator']
     flash('You have been signed out successfully.', 'success')
     return redirect(url_for('administrators.dashboard'))
+
+
+@blueprint.route('/visitors/overview', methods=['GET', 'POST'])
+@decorators.requires_administrator
+def visitors_overview():
+    filters, order_by, limit, page = utilities.get_filters_order_by_limit_page(
+        'visitors',
+        {},
+        {
+            'column': 'visitors.id',
+            'direction': 'asc',
+        },
+        10,
+        1
+    )
+    form = forms.visitors_filters(**filters)
+    query = form.apply(g.mysql.query(models.visitor))
+    pager = classes.pager(query.count(), limit, page)
+    return render_template(
+        'administrators/views/visitors_overview.html',
+        form=form,
+        visitors=query.order_by('%(column)s %(direction)s' % order_by).all()[
+            pager.prefix:pager.suffix
+        ],
+        order_by=order_by,
+        pager=pager,
+    )
+
+
+@blueprint.route('/visitors/process', methods=['GET', 'POST'])
+@decorators.requires_administrator
+def visitors_process():
+    if request.method == 'GET':
+        utilities.set_order_by_limit_page('visitors')
+    if request.method == 'POST':
+        utilities.set_filters('visitors', forms.visitors_filters)
+    return redirect(url_for('administrators.visitors_overview'))
+
+
+@blueprint.route('/visitors/export', methods=['GET', 'POST'])
+@decorators.requires_administrator
+def visitors_export():
+    rows = []
+    rows.append([
+        'ID',
+        'Email',
+        'Timestamp',
+    ])
+    for visitor in loads(request.form['visitors']).values():
+        rows.append([
+            visitor[0],
+            visitor[1],
+            visitor[2],
+        ])
+    csv = StringIO()
+    writer(
+        csv,
+        delimiter=',',
+        doublequote=True,
+        lineterminator='\n',
+        quotechar='"',
+        quoting=QUOTE_ALL,
+        skipinitialspace=True
+    ).writerows(rows)
+    return Response(
+        csv.getvalue(),
+        headers={
+            'Content-Disposition':
+            'attachment; filename=export.csv'
+        },
+        mimetype='text/csv'
+    )
diff --git a/sections/visitors.py b/sections/visitors.py
index 3784ce6..09b5e04 100644
--- a/sections/visitors.py
+++ b/sections/visitors.py
@@ -2,9 +2,19 @@
 
 from bleach import linkify
 from datetime import datetime, timedelta
-from flask import abort, Blueprint, g, render_template, request
+from flask import (
+    abort,
+    Blueprint,
+    flash,
+    g,
+    redirect,
+    render_template,
+    request,
+    url_for
+)
 from pytz import utc
 
+from modules import forms
 from modules import models
 from modules import utilities
 
@@ -68,6 +78,23 @@ def ajax():
     return render_template('visitors/views/ajax.html', tweets=tweets)
 
 
+@blueprint.route('/stay-in-touch', methods=['GET', 'POST'])
+def stay_in_touch():
+    visitor = models.visitor()
+    form = forms.visitors_form(request.form, visitor)
+    form.id = visitor.id
+    if request.method == 'POST':
+        if form.validate_on_submit():
+            g.mysql.add(form.get_instance(visitor))
+            g.mysql.commit()
+            flash('You are subscribed successfully.', 'success')
+            return redirect(url_for('visitors.dashboard'))
+        flash('You are not subscribed.', 'danger')
+    return render_template(
+        'visitors/views/stay_in_touch.html', form=form,
+    )
+
+
 def callback(attrs, new=False):
     attrs['rel'] = 'nofollow'
     attrs['target'] = '_blank'
diff --git a/templates/administrators/layout.html b/templates/administrators/layout.html
index c9db649..589b98e 100644
--- a/templates/administrators/layout.html
+++ b/templates/administrators/layout.html
@@ -95,6 +95,18 @@
                                             Handles
                                         </a>
                                     </li>
+                                    <li class="{{
+                                        'active'
+                                        if navbar == 'visitors'
+                                        else ''
+                                    }}">
+                                        <a href="{{ url_for(
+                                            'administrators.visitors_overview'
+                                        ) }}">
+                                            <i class="fa fa-fw fa-users"></i>
+                                            Visitors
+                                        </a>
+                                    </li>
                                 {% else %}
                                     <li class="{{
                                         'active' if navbar == 'sign_in' else ''
